@import "utilities/functions/all";
// @author Tyler Benton
// @page helpers/variables
// @type {map}
$color-settings: (
 colors: (
  a: (0: color(#95a5a6, 5), name: "gray"),
  b: (0: #34495e, name: "dark blue"),
  c: (0: #3498db, name: "light blue"),
  d: (0: #1abc9c, name: "turquoise"),
  e: (0: #2ecc71, name: "green"),
  f: (0: #e74c3c, name: "red"),
  g: (0: #9b59b6, name: "purple"),
  h: (0: #f1c40f, name: "yellow"),
  i: (0: #e67e22, name: "orange"),
  cashback: (
   -2: #0cb65c,
   -1: #00b159,
   0: #018753,
   name: green
  ),
  star: (
   0: #f8c264, // for star ratings
   name: yellow
  )
 )
);
@include define-color-set;

@include define-color-set("messaging", (
 colors: (
  success: (
   0: #3c763d,
   -5: #dff0D8,
   name: "green"
  ),
  info: (
   0: #31708f,
   -5: #d9edf7,
   name: "blue"
  ),
  warning: (
   0: #8a6d3b,
   -5: #fcf8e3,
   name: "tan"
  ),
  danger: (
   0: #a94442,
   -5: #f2dede,
   name: "red"
  )
 )
));

// @author Tyler Benton
// @page helpers/variables
// @description
// This is a map of defaults that are used throughout the site to make things more consitant.
//
// @type {map} - Site defaults
//
// @markup {scss} (example="false") **Example:**
// .foo{
//  border-radius: get($config, border-radius);
// }
//
// @markup {scss} (example="false") **Example:** Using this with `nth-val()`
// .bar{
//  margin-top: nth-val(get($config, margin), 1);
// }
$config: (
 border-radius: 6px,
 border-color: color(a, -6),
 color: color(a, 0),
 font-family: unquote("'Helvetica Neue', Helvetica, Arial, sans-serif"),
 font-size: 14px,
 line-height: 1.4em,
 padding: 10px
);

// @author Tyler Benton
// @page helpers/variables
// @type {map}
$paths: (
 img: "../images",
 font: "../images/font"
);


// @author Tyler Benton
// @description - These are some useful easing functions
// @page helpers/variables
// @type {map}
$easing: (
 swift: cubic-bezier(.55, 0, .1, 1),
 bounce: cubic-bezier(.19, 1.32, .48, 1)
);

// @author Tyler Benton
// @description - If you use z-index somewhere add it to this map so we can easily see what's on top and what's not.
// @page helpers/variables
// @type {map} - Map of all the `z-index`'s used in the site.
$z-index: (

);

// @author Tyler Benton
// @page helpers/variables
// @type {map} - Map of all the default media queries
$breakpoints: (
 sm: 568px,
 md: 768px,
 lg: 1024px,
 xl: 1400px
);

// Why we should use sm, md, lg, and xl
//  1. Responsive design is based off of the width of the browser not device.
//  2. There is too much cross over between tablets and laptops
//  3. Sites should be designed as if they were device indpenedent.
//     For example if you had three windows open on your laptop and they're
//     spaced out into 1/3 that size would be roughly 400px wide. It's still
//     a desktop, it just has a smaller window size.
//  4. Mobile, tablet, laptop, desktop is too specific in terms of device.
//  5. You are supposed to change your media querys based off of your content.
//  6. Going with sm, md, lg, and xl is very generic and can be updated to fit any size project.
//  7. It is considered best practice.
//  8. A xs size should be the starting size of your styles and there fore doesn't need a media query.
//  9. "mobile, mobile-l, phablet, phablet-l, tablet, tablet-l, laptop, desktop" is to many different
//      screen sizes and would end up generating **4x** the amount of code when writing helper classes.
//      They're also more characters that have to go over the wire which could cause the file size to go up.
//  10. Touch devices should be styled using the `.touch` class generated by modernizr
//  11. Modernizr uses feature detection instead of writing browser specific styles.
//      This goes hand in hand with writing sites based off of screen width instead of type of device.
//  12. sm, md, lg, xl methodology is already being used on the motives site with bootstrap, and in our email templates.
//  13. I'm going to stop here but there're hundreds of reasons why using "mobile, mobile-l, phablet, phablet-l, tablet, tablet-l, laptop, desktop"
//      is a bad way to go.

// @author Tyler Benton
// @page helpers/variables
// @type {map} - Map of all media query expressions
$media-expressions: (
 "screen": "screen",
 "print": "print",
 "handheld": "handheld",
 "retina2x": (
  "(-webkit-min-device-pixel-ratio: 2)", "(min--moz-device-pixel-ratio: 2)", "(min-resolution: 192dpi)", "(min-resolution: 2dppx)"
  ),
 "retina3x": (
  "(-webkit-min-device-pixel-ratio: 3)", "(min--moz-device-pixel-ratio: 3)", "(min-resolution: 350dpi)", "(min-resolution: 3dppx)"
 )
);

// @author Tyler Benton
// @page helpers/variables
// @type {map} - Map of the grid settings
$grid: (
 namespace: "col",
 columns: 12,
 gutter: 20px,
 row-spacing: 1em
);

// @author Tyler Benton
// @page helpers/variables
// @type {map} - Map of the default values used by icons
$icon: (
 font-family: icons,
 spacing: 10px
);

// @author Tyler Benton
// @page helpers/variables
// @type {map} - Map of the icons used
$icons: (
 shopbuddy: "e64f",
 trending: "e650",
 bars: "e600",
 bell: "e601",
 book: "e602",
 bookmark-o: "e603",
 bookmark: "e604",
 camera: "e605",
 clip: "e606",
 clock: "e607",
 cloud: "e608",
 coupon-tag: "e609",
 credit-card: "e60a",
 edit: "e60b",
 email: "e60c",
 external-link: "e60d",
 eye-slash: "e60e",
 eye: "e60f",
 history: "e610",
 home: "e611",
 image: "e612",
 like: "e613",
 unlike: "e614",
 link: "e615",
 list: "e616",
 loading: "e617",
 location-arrow: "e618",
 lock: "e619",
 map-marker: "e61a",
 mobile: "e61b",
 phone: "e61c",
 rotate-right: "e61d",
 rotate-left: "e61e",
 search: "e61f",
 send: "e620",
 settings: "e621",
 checkmark: "e622",
 close: "e623",
 plus: "e624",
 minus: "e625",
 info: "e626",
 question-mark: "e627",
 exclamation-mark: "e628",
 error: "e629",
 sort-h: "e62a",
 sort: "e62b",
 caret-top: "e62c",
 caret-right: "e62d",
 caret-bottom: "e62e",
 caret-left: "e62f",
 arrow-up: "e630",
 arrow-right: "e631",
 arrow-down: "e632",
 arrow-left: "e633",
 expand: "e634",
 compress: "e635",
 level-up: "e636",
 level-right-75: "e637",
 level-down: "e638",
 level-right-77: "e639",
 star-plus: "e63a",
 star: "e63b",
 store: "e63c",
 tag: "e63d",
 tags: "e63e",
 trash: "e63f",
 unlock: "e640",
 user: "e641",
 video: "e642",
 warning: "e643",
 wrench: "e644",
 share: "e645",
 retweet: "e646",
 twitter: "e647",
 vine: "e648",
 you-tube: "e649",
 google-plus: "e64a",
 pinterest: "e64b",
 facebook: "e64c",
 linkedin: "e64d",
 instagram: "e64e"
);



// @author Tyler Benton
// @page helpers/variables
// @description
// Use this to set the fonts that are used on the site.
// The map-key is the font family and the list is the different weights and styles you want to load.
// No need to call a mixin or do anything else. The sass script will detect the font weight and style.
// `eot`, `woff`, `ttf`, `svg` are the files that are going to be loaded.
//
// @type {map} - A map of fonts that are going to be used on the site.
//
// @note {!!!}
// The map-key you define represents the font folder and the font file prefix.
// `OpenSans/OpenSans-*.{eot, woff, ttf, svg}`
//
// @note {!}
// Options: italic, oblique, thin, extralight, extra-light, light, normal, regular, bold, medium, semi-bold, semibold, extra-bold, extrabold, ultra-bold
// The case you use should match the file name.
//
// @markup {scss} (example="false") **Example:**
// $fonts: (
//  OpenSans: (Normal, NormalItalic, Italic, Bold, "")
// );
//
// @markup {scss} (example="false") **Outputs:**
// \@font-face{
//  font-family: OpenSans;
//  src: url("../images/font/OpenSans/OpenSans-Normal.eot");
//  src: url("../images/font/OpenSans/OpenSans-Normal.eot?#iefix") format("embedded-opentype"), ...other files...;
//  font-weight: 400;
//  font-style: normal;
//  font-stretch: normal;
// }
// \@font-face{
//  font-family: OpenSans;
//  src: url("../images/font/OpenSans/OpenSans-NormalItalic.eot");
//  src: url("../images/font/OpenSans/OpenSans-NormalItalic.eot?#iefix") format("embedded-opentype"), ...other files...;
//  font-weight: 400;
//  font-style: italic;
//  font-stretch: normal;
// }
// \@font-face{
//  font-family: OpenSans;
//  src: url("../images/font/OpenSans/OpenSans-Italic.eot");
//  src: url("../images/font/OpenSans/OpenSans-Italic.eot?#iefix") format("embedded-opentype"), ...other files...;
//  font-weight: 400;
//  font-style: italic;
//  font-stretch: normal;
// }
// \@font-face{
//  font-family: OpenSans;
//  src: url("../images/font/OpenSans/OpenSans-Bold.eot");
//  src: url("../images/font/OpenSans/OpenSans-Bold.eot?#iefix") format("embedded-opentype"), ...other files...;
//  font-weight: 400;
//  font-style: italic;
//  font-stretch: normal;
// }
// \@font-face{
//  font-family: OpenSans;
//  src: url("../images/font/OpenSans/OpenSans.eot");
//  src: url("../images/font/OpenSans/OpenSans.eot?#iefix") format("embedded-opentype"), ...other files...;
//  font-weight: 400;
//  font-style: normal;
//  font-stretch: normal;
// }
$fonts: (
 OpenSans: (Normal, Bold)
);

@if variable-exists(icon) and map-has-key($icon, font-family){
 $fonts: map-merge($fonts, (get($icon, font-family): "")) !global;
}